//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""Taps"",
            ""id"": ""0c5305d3-9d39-414b-be00-439ffdfc0c96"",
            ""actions"": [
                {
                    ""name"": ""ButtonClick"",
                    ""type"": ""Value"",
                    ""id"": ""c28db563-1a2f-437a-b976-ac57a905caaa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""b9aaae73-1761-4e2c-96a3-f42f13f116a2"",
                    ""path"": ""OneModifier"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonClick"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""0891e202-1dd6-4d35-8996-b891b84a89cf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""c15ed81b-c11c-43f6-9def-d9745fa56628"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""be892f8e-4e15-4ac1-9448-da53d25c0d0f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonClick"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""afd6d171-51f7-441e-9aed-13f2d38ca07e"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""0b1074d3-9456-42eb-ae8d-8c01e6d39b7e"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""CameraPan"",
            ""id"": ""f37a432c-10fd-470a-8e6b-fe1109079997"",
            ""actions"": [
                {
                    ""name"": ""ScreenTouched"",
                    ""type"": ""Value"",
                    ""id"": ""4327f3b0-50bf-41cb-a05e-f992088d067c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""33a47a65-318a-40eb-a878-8dea122519fe"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenTouched"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""43be8ef6-91e8-42fb-bd50-7092d713e703"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenTouched"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""944fd8f9-ac1d-4910-98ae-bbfcada10368"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenTouched"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""be58ef9b-c7e4-40a2-9152-6de3043932ba"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenTouched"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""34308a3c-d5b8-4d5d-964d-3411c73d7d2a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenTouched"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""0f96dd8e-28b3-433f-85a7-16b66128d3f0"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenTouched"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard (Testing)"",
            ""bindingGroup"": ""Keyboard (Testing)"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Taps
        m_Taps = asset.FindActionMap("Taps", throwIfNotFound: true);
        m_Taps_ButtonClick = m_Taps.FindAction("ButtonClick", throwIfNotFound: true);
        // CameraPan
        m_CameraPan = asset.FindActionMap("CameraPan", throwIfNotFound: true);
        m_CameraPan_ScreenTouched = m_CameraPan.FindAction("ScreenTouched", throwIfNotFound: true);
    }

    ~@GameInputs()
    {
        UnityEngine.Debug.Assert(!m_Taps.enabled, "This will cause a leak and performance issues, GameInputs.Taps.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_CameraPan.enabled, "This will cause a leak and performance issues, GameInputs.CameraPan.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Taps
    private readonly InputActionMap m_Taps;
    private List<ITapsActions> m_TapsActionsCallbackInterfaces = new List<ITapsActions>();
    private readonly InputAction m_Taps_ButtonClick;
    public struct TapsActions
    {
        private @GameInputs m_Wrapper;
        public TapsActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ButtonClick => m_Wrapper.m_Taps_ButtonClick;
        public InputActionMap Get() { return m_Wrapper.m_Taps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TapsActions set) { return set.Get(); }
        public void AddCallbacks(ITapsActions instance)
        {
            if (instance == null || m_Wrapper.m_TapsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TapsActionsCallbackInterfaces.Add(instance);
            @ButtonClick.started += instance.OnButtonClick;
            @ButtonClick.performed += instance.OnButtonClick;
            @ButtonClick.canceled += instance.OnButtonClick;
        }

        private void UnregisterCallbacks(ITapsActions instance)
        {
            @ButtonClick.started -= instance.OnButtonClick;
            @ButtonClick.performed -= instance.OnButtonClick;
            @ButtonClick.canceled -= instance.OnButtonClick;
        }

        public void RemoveCallbacks(ITapsActions instance)
        {
            if (m_Wrapper.m_TapsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITapsActions instance)
        {
            foreach (var item in m_Wrapper.m_TapsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TapsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TapsActions @Taps => new TapsActions(this);

    // CameraPan
    private readonly InputActionMap m_CameraPan;
    private List<ICameraPanActions> m_CameraPanActionsCallbackInterfaces = new List<ICameraPanActions>();
    private readonly InputAction m_CameraPan_ScreenTouched;
    public struct CameraPanActions
    {
        private @GameInputs m_Wrapper;
        public CameraPanActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScreenTouched => m_Wrapper.m_CameraPan_ScreenTouched;
        public InputActionMap Get() { return m_Wrapper.m_CameraPan; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraPanActions set) { return set.Get(); }
        public void AddCallbacks(ICameraPanActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraPanActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraPanActionsCallbackInterfaces.Add(instance);
            @ScreenTouched.started += instance.OnScreenTouched;
            @ScreenTouched.performed += instance.OnScreenTouched;
            @ScreenTouched.canceled += instance.OnScreenTouched;
        }

        private void UnregisterCallbacks(ICameraPanActions instance)
        {
            @ScreenTouched.started -= instance.OnScreenTouched;
            @ScreenTouched.performed -= instance.OnScreenTouched;
            @ScreenTouched.canceled -= instance.OnScreenTouched;
        }

        public void RemoveCallbacks(ICameraPanActions instance)
        {
            if (m_Wrapper.m_CameraPanActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraPanActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraPanActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraPanActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraPanActions @CameraPan => new CameraPanActions(this);
    private int m_KeyboardTestingSchemeIndex = -1;
    public InputControlScheme KeyboardTestingScheme
    {
        get
        {
            if (m_KeyboardTestingSchemeIndex == -1) m_KeyboardTestingSchemeIndex = asset.FindControlSchemeIndex("Keyboard (Testing)");
            return asset.controlSchemes[m_KeyboardTestingSchemeIndex];
        }
    }
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface ITapsActions
    {
        void OnButtonClick(InputAction.CallbackContext context);
    }
    public interface ICameraPanActions
    {
        void OnScreenTouched(InputAction.CallbackContext context);
    }
}
